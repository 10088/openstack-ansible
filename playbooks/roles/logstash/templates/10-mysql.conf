filter {
  #---------------------------------------------------------------------------
  # Parse and tag messages coming from mysql
  #
  if [@source] =~ /mysql-slow/ {
    mutate {
      add_tag => [ "infrastructure", "mysql-slow" ]
    }
  } else if [@source] =~ /mysql/ {
    mutate {
      add_tag => [ "infrastructure", "mysql" ]
    }
  }

  if "mysql-slow" in [tags] {
    #-------------------------------------------------------------------
    # Parse and tag mysql slow log messages. These are multi-line logs.
    # i.e.:
    ## Time: 150108 15:33:49
    ## User@Host: nova[nova] @ aio1 [172.29.236.100]
    ## Thread_id: 11912  Schema: nova  QC_hit: No
    ## Query_time: 0.000539  Lock_time: 0.000194  Rows_sent: 0  Rows_examined: 0
    #SET timestamp=1420731229;
    #SELECT ...
    #FROM ...
    #WHERE ...
    #

    # The multiline filter only operates on message, not @message
    mutate {
      add_field => [ "message", "%{@message}" ]
    }

    grep {
      match => [ "message", "^# Time:.*$" ]
      negate => true
    }

    multiline {
      pattern => "^# User@Host:.*$"
      negate => true
      what => "previous"
    }

    # Capture user, optional host and optional ip fields
    # sample log file lines:
    # User@Host: logstash[logstash] @ localhost [127.0.0.1]
    # User@Host: logstash[logstash] @  [127.0.0.1]
    grok {
      match => [ "message", "(?m)^# User@Host: %{USER:mysql_user}(?:\[[^\]]+\])?\s+@\s+%{HOST:mysql_hostname}?\s+\[%{IP:mysql_ip}?\]" ]
      tag_on_failure => []
    }

    # Capture thread id, schema name and qc_hit value
    # i.e.
    # 1) # Thread_id: 11912  Schema: nova  QC_hit: No
    #
    grok {
      match => [ "message", "(?m)^# Thread_id: %{NUMBER:mysql_threadid}\s+Schema: %{DATA:mysql_database}\s+QC_hit: %{DATA:mysql_qc_hit}" ]
      tag_on_failure => []
    }

    # Capture query time, lock time, rows returned and rows examined
    # sample log file lines:
    # Query_time: 102.413328  Lock_time: 0.000167 Rows_sent: 0  Rows_examined: 1970
    # Query_time: 1.113464  Lock_time: 0.000128 Rows_sent: 1  Rows_examined: 0
    grok {
      match => [ "message", "(?m)^# Query_time: %{NUMBER:mysql_query_time}\s+Lock_time: %{NUMBER:mysql_lock_time}\s+Rows_sent: %{NUMBER:mysql_rows_sent}\s+Rows_examined: %{NUMBER:mysql_rows_examined}"]
      tag_on_failure => []
    }

    # Capture the time the query happened
    grok {
      match => [ "message", "(?m)^SET timestamp=%{NUMBER:mysql_timestamp};" ]
      tag_on_failure => []
    }

    # Extract the time based on the time of the query and
    # not the time the item got logged
    date {
      match => [ "mysql_timestamp", "UNIX" ]
    }

    # Finalise the data
    mutate {
      add_field => {
        "os_level" => "%{@fields[severity]}"
      }
      rename => [ "message", "openstack_message" ]
      remove_field => [ "mysql_timestamp" ]
    }
  }
}
